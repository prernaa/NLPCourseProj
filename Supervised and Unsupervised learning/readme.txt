Supervised learning method:
1. Need to change the file path in n-grams.py to first train the model and validate it, and then test it on unseen data
2. n-grams.py depends on the Stanford POS tagger

Unsupervised learning method:
The unsupervised learning has been run in parallel in 500run1.py, 500run2.py, 500run3.py, 500run4.py.

1. 500run.py gives the polarity score of the sample data. 
2. The generated file is given as an input to k-means_cnetsnet.py and thres_cnetsnet.py
3. We compare the outputs of the files generated by k-means_cnetsnet.py and thres_cnetsnet.py
4. The labelled files are used to query SenticNet. 
5. SenticNetQuery takes a set of words and gives its polarity in SenticNet. 
6. one_tweet_pipeline.py is used to get the polarity of one tweet. It creates a bag of words, gets the polarity of each word in SenticNet using SenticNetQuery.py
and detects the overall polarity of the tweet. 

Note: The dataset for both supervised and unsupervised classifiers is the same. They have been named differently for convenience purpose.

Data for Supervised training method:
Training Data  - twitter-train-cleansed-B_rmnotav.tsv
Validation Data input - twitter-dev-input-B_rmnotav.tsv
Validation Data gold - twitter-dev-gold-B_rmnotav.tsv
Test Data input - nlp_proj_test_input.txt
Test Data gold - nlp_proj_test_gold.txt

Data for unsupervised training method:
Sample data - sncp_test1.txt
processed2.xml - SenticNet file containing list of words (or set of words) with their respective polarities.

Evaluation:
1. evalTopLevel.py and evaluate.py compare the labels predicted by the trained classifiers with the gold (target labels) file to give the performance statistics 
like F-measure, precision, recall etc.